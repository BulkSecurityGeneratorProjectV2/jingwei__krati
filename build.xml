<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="krati" default="main" basedir=".">
    <property name="project.name" value="krati"/>
    <property file="${basedir}/build.properties"/>
    <property name="jar.file" value="${build.dir}/${project.name}-${version}.jar"/>
    
    <property name="ivy.jar.dir" value="${basedir}/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="ivy.install.version" value="2.0.0-beta1"/>
    
    <property name="src.api.dir"  value="${src.dir}/api"/>
    <property name="src.impl.dir" value="${src.dir}/impl"/>
    <property name="src.sos.dir"  value="${src.dir}/sos"/>
    
    <property name="tests.to.run" value="TestDataCache"/>
    
    <path id="main.compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>
    
    <path id="test.compile.classpath">
        <fileset dir="${test.lib.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>
    
    <path id="main.classpath">
        <dirset dir="${build.classes.dir}">
            <include name="**"/>
        </dirset>
    </path>
    
    <path id="test.classpath">
        <dirset dir="${build.test.classes.dir}">
            <include name="**"/>
        </dirset>
    </path>
    
    <target name="download-ivy" unless="skip.download">
    <mkdir dir="${ivy.jar.dir}"/>
        <echo message="installing ivy..."/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
    
    <target name="install-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    
    <target name="resolve" depends="install-ivy">
        <ivy:retrieve/>
    </target>
    
    <target name="clean">
      <delete dir="${logs.dir}"/>
      <delete dir="${build.dir}"/>
      <delete dir="${target.dir}"/>
      <delete dir="${test.output.dir}"/>
    </target>
    
    <target name="init" depends="resolve">
        <mkdir dir="${config.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
    </target>
    
    <target name="compile" depends="init" description="-- compile source">
        <javac debug="true" destdir="${build.classes.dir}">
            <src path="${src.api.dir}"/>
            <src path="${src.impl.dir}"/>
            <src path="${src.sos.dir}"/>
            <classpath refid="main.compile.classpath"/>
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${config.dir}"/>
        </copy>
    </target>
    
    <target name="jar" depends="compile">
        <jar destfile="${jar.file}" basedir="${build.classes.dir}"/>
    </target>
    
    <target name="test.clean" description="-- clean test results">
      <delete dir="${logs.dir}"/>
      <delete dir="${test.output.dir}"/>
      <delete dir="${build.test.classes.dir}"/>
    </target>
    
    <target name="test.init" depends="compile">
        <mkdir dir="${logs.dir}"/>
        <mkdir dir="${test.output.dir}"/>
        <mkdir dir="${build.test.classes.dir}"/>
    </target>
    
    <target name="test.compile" depends="test.init">
        <javac debug="true" destdir="${build.test.classes.dir}">
            <src path="${test.src.dir}"/>
            <classpath refid="main.classpath"/>
            <classpath refid="main.compile.classpath"/>
            <classpath refid="test.compile.classpath"/>
        </javac>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.config.dir}"/>
        </copy>
    </target>
    
    <target name="test" depends="test.compile" description="-- run regression (30 seconds per test)">
        <junit maxmemory="4G">
            <jvmarg value="-server"/>
            <jvmarg value="-Dtest.idStart=0"/>
            <jvmarg value="-Dtest.idCount=10000"/>
            <jvmarg value="-Dtest.keyCount=10000"/>
            <jvmarg value="-Dtest.initLevel=1"/>
            <jvmarg value="-Dtest.numReaders=4"/>
            <jvmarg value="-Dtest.segFileSizeMB=128"/>
            <jvmarg value="-Dtest.runTimeSeconds=30"/>
            <jvmarg value="-Dtest.hitPercent=100"/>
            <jvmarg value="-Dtest.resources.dir=${test.resources.dir}"/>
            <jvmarg value="-Dtest.output.dir=${test.output.dir}"/>
            <formatter type="brief" usefile="false"/>
            
            <classpath>
                <path refid="main.classpath"/>
                <path refid="test.classpath"/>
                <path refid="main.compile.classpath"/>
                <path refid="test.compile.classpath"/>
            </classpath>
            
            <batchtest fork="yes">
                <fileset dir="${build.test.classes.dir}" includes="**/Test*.class" excludes="**/TestBdb*.class"/>
            </batchtest>
        </junit>
    </target>
    
    <target name="test.stress" depends="test.compile" description="-- run regression (30 minutes per test)">
        <junit maxmemory="16G">
            <jvmarg value="-server"/>
            <jvmarg value="-Dtest.idStart=0"/>
            <jvmarg value="-Dtest.idCount=5000000"/>
            <jvmarg value="-Dtest.keyCount=5000000"/>
            <jvmarg value="-Dtest.initLevel=7"/>
            <jvmarg value="-Dtest.numReaders=4"/>
            <jvmarg value="-Dtest.segFileSizeMB=256"/>
            <jvmarg value="-Dtest.runTimeSeconds=1800"/>
            <jvmarg value="-Dtest.hitPercent=100"/>
            <jvmarg value="-Dtest.resources.dir=${test.resources.dir}"/>
            <jvmarg value="-Dtest.output.dir=${test.output.dir}"/>
            <formatter type="brief" usefile="false"/>
            
            <classpath>
                <path refid="main.classpath"/>
                <path refid="test.classpath"/>
                <path refid="main.compile.classpath"/>
                <path refid="test.compile.classpath"/>
            </classpath>
            
            <batchtest fork="yes">
		    <fileset dir="${build.test.classes.dir}" includes="**/Test*.class" excludes="**/TestBdb*,**/TestDynamicDataArray.class"/>
            </batchtest>
        </junit>
    </target>

    <property name="test.quick.idCount" value="100000"/>
    <property name="test.quick.keyCount" value="100000"/>
    <property name="test.quick.segFileSizeMB" value="128"/>
    <property name="test.quick.runTimeSeconds" value="30"/>
    <property name="test.quick.hitPercent" value="100"/>
    <property name="test.quick.initLevel" value="2"/>
    <property name="test.quick.numReaders" value="4"/>

    <target name="test.quick" description="-- run a quick test, default -Dtests.to.run=TestDataCache (30 seconds)" depends="test.compile">
        <junit maxmemory="4G">
            <jvmarg value="-server"/>
            <jvmarg value="-Dtest.idStart=0"/>
            <jvmarg value="-Dtest.idCount=${test.quick.idCount}"/>
            <jvmarg value="-Dtest.keyCount=${test.quick.keyCount}"/>
            <jvmarg value="-Dtest.initLevel=${test.quick.initLevel}"/>
            <jvmarg value="-Dtest.numReaders=${test.quick.numReaders}"/>
            <jvmarg value="-Dtest.segFileSizeMB=${test.quick.segFileSizeMB}"/>
            <jvmarg value="-Dtest.runTimeSeconds=${test.quick.runTimeSeconds}"/>
            <jvmarg value="-Dtest.hitPercent=${test.quick.hitPercent}"/>
            <jvmarg value="-Dtest.resources.dir=${test.resources.dir}"/>
            <jvmarg value="-Dtest.output.dir=${test.output.dir}"/>
            <formatter type="brief" usefile="false"/>
            
            <classpath>
                <path refid="main.classpath"/>
                <path refid="test.classpath"/>
                <path refid="main.compile.classpath"/>
                <path refid="test.compile.classpath"/>
            </classpath>
            
            <batchtest fork="yes">
                <fileset dir="${build.test.classes.dir}" includes="**/${tests.to.run}.class"/>
            </batchtest>
        </junit>
    </target>
    
    <property name="test.loggc.idCount" value="5000000"/>
    <property name="test.loggc.keyCount" value="5000000"/>
    <property name="test.loggc.segFileSizeMB" value="256"/>
    <property name="test.loggc.runTimeSeconds" value="3600"/>
    <property name="test.loggc.hitPercent" value="100"/>
    <property name="test.loggc.initLevel" value="7"/>
    <property name="test.loggc.numReaders" value="4"/>
    
    <target name="test.loggc" description="-- run Java GC test, default -Dtests.to.run=TestDataCache (1 hour)" depends="test.compile">
        <junit maxmemory="16G">
            <jvmarg value="-Xloggc:${logs.dir}/krati.gc"/>
            <jvmarg value="-XX:+PrintGCDetails"/>
            <jvmarg value="-server"/>
            <jvmarg value="-Dtest.idStart=0"/>
            <jvmarg value="-Dtest.idCount=${test.loggc.idCount}"/>
            <jvmarg value="-Dtest.keyCount=${test.loggc.keyCount}"/>
            <jvmarg value="-Dtest.initLevel=${test.loggc.initLevel}"/>
            <jvmarg value="-Dtest.numReaders=${test.loggc.numReaders}"/>
            <jvmarg value="-Dtest.segFileSizeMB=${test.loggc.segFileSizeMB}"/>
            <jvmarg value="-Dtest.runTimeSeconds=${test.loggc.runTimeSeconds}"/>
            <jvmarg value="-Dtest.hitPercent=${test.loggc.hitPercent}"/>
            <jvmarg value="-Dtest.resources.dir=${test.resources.dir}"/>
            <jvmarg value="-Dtest.output.dir=${test.output.dir}"/>
            <formatter type="brief" usefile="false"/>
            
            <classpath>
                <path refid="main.classpath"/>
                <path refid="test.classpath"/>
                <path refid="main.compile.classpath"/>
                <path refid="test.compile.classpath"/>
            </classpath>
            
            <batchtest fork="yes">
                <fileset dir="${build.test.classes.dir}" includes="**/${tests.to.run}.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="main" depends="clean,jar">
    </target>
</project>

